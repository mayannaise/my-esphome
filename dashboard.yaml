esphome:
  name: dashboard
  platform: ESP32
  board: m5stack-core-esp32

<<: !include common.yaml

wifi:
  ssid: !secret wifi_ssid_indoor
  password: !secret wifi_password
  ap:
    password: !secret fallback_ap_password

external_components:
  - source: github://pionizer/pionizer-axp192
    components: [axp192]

globals:
  - id: latest_fuel_level
    type: int
    restore_value: no
  - id: latest_fuel_volume
    type: int
    restore_value: no
  - id: latest_wifi_signal_strength_oiltank
    type: int
    restore_value: no
  - id: last_update_oiltank
    type: ESPTime
    initial_value: "id(esptime).now()"
    restore_value: no
  - id: latest_freezer1_temperature
    type: float
    restore_value: no
  - id: latest_freezer1_humidity
    type: int
    restore_value: no
  - id: latest_freezer2_temperature
    type: float
    restore_value: no
  - id: latest_freezer2_humidity
    type: int
    restore_value: no
  - id: latest_wifi_signal_strength_freezer
    type: int
    restore_value: no
  - id: last_update_freezer
    type: ESPTime
    initial_value: "id(esptime).now()"
    restore_value: no
  - id: last_update_atmotube
    type: ESPTime
    initial_value: "id(esptime).now()"
    restore_value: no

time:
  platform: sntp
  id: esptime

sun:
  latitude: !secret home_lat
  longitude: !secret home_lon
  id: the_sun

http_request:
  verify_ssl: false

sensor:
  - platform: axp192
    model: M5CORE2
    address: 0x34
    i2c_id: bus_a
    update_interval: 30s
    brightness: 100%
    battery_level:
      name: Battery Level
  - platform: wifi_signal
    name: WiFi Signal Strength
  - platform: uptime
    name: Uptime
  - platform: template
    id: freezer1_temperature
    update_interval: 60s
    lambda: |-
      return id(latest_freezer1_temperature);
  - platform: template
    id: freezer2_temperature
    update_interval: 60s
    lambda: |-
      return id(latest_freezer2_temperature);
  - platform: template
    id: atmotube
    update_interval: never
  - platform: template
    id: atmotube_temp
    update_interval: never
  - platform: template
    id: atmotube_humid
    update_interval: never

mqtt:
  broker: !secret mqtt_broker_host
  username: !secret mqtt_username
  password: !secret mqtt_password
  on_message:
    - topic: oiltank/sensor/fuel_level/state
      then:
        lambda: |-
          if (x.find_first_not_of("-+.0123456789") == std::string::npos) {
            int val = stoi(x);
            ESP_LOGI("dashboard", "Fuel level is %d%%", val);
            id(latest_fuel_level) = val;
            id(last_update_oiltank) = id(esptime).now();
          } else {
            ESP_LOGW("dashboard", "Error processing fuel level: %s", x.c_str());
          }
    - topic: oiltank/sensor/fuel_volume/state
      then:
        lambda: |-
          if (x.find_first_not_of("-+.0123456789") == std::string::npos) {
            int val = stoi(x);
            ESP_LOGI("dashboard", "Fuel volume is %d litres", val);
            id(latest_fuel_volume) = val;
            id(last_update_oiltank) = id(esptime).now();
          } else {
            ESP_LOGW("dashboard", "Error processing fuel volume: %s", x.c_str());
          }
    - topic: oiltank/sensor/wifi_signal_strength/state
      then:
        lambda: |-
          if (x.find_first_not_of("-+.0123456789") == std::string::npos) {
            int val = stoi(x);
            ESP_LOGI("dashboard", "Oiltank WiFi signal strength is %ddBm", val);
            id(latest_wifi_signal_strength_oiltank) = val;
            id(last_update_oiltank) = id(esptime).now();
          } else {
            ESP_LOGW("dashboard", "Error processing signal strength: %s", x.c_str());
          }
    - topic: incubator/sensor/freezer1temperature/state
      then:
        lambda: |-
          if (x.find_first_not_of("-+.0123456789") == std::string::npos) {
            float val = stof(x);
            ESP_LOGI("dashboard", "Freezer 1 temperature is %0.1f'C", val);
            id(latest_freezer1_temperature) = val;
            id(last_update_freezer) = id(esptime).now();
          } else {
            ESP_LOGW("dashboard", "Error processing freezer 1 temperature: %s", x.c_str());
          }
    - topic: incubator/sensor/freezer1humidity/state
      then:
        lambda: |-
          if (x.find_first_not_of("-+.0123456789") == std::string::npos) {
            int val = stoi(x);
            ESP_LOGI("dashboard", "Freezer 1 humidity is %d%%", val);
            id(latest_freezer1_humidity) = val;
            id(last_update_freezer) = id(esptime).now();
          } else {
            ESP_LOGW("dashboard", "Error processing freezer 1 humidity: %s", x.c_str());
          }
    - topic: incubator/sensor/freezer2temperature/state
      then:
        lambda: |-
          if (x.find_first_not_of("-+.0123456789") == std::string::npos) {
            float val = stof(x);
            ESP_LOGI("dashboard", "Freezer 2 temperature is %0.1f'C", val);
            id(latest_freezer2_temperature) = val;
            id(last_update_freezer) = id(esptime).now();
          } else {
            ESP_LOGW("dashboard", "Error processing freezer 2 temperature: %s", x.c_str());
          }
    - topic: incubator/sensor/freezer2humidity/state
      then:
        lambda: |-
          if (x.find_first_not_of("-+.0123456789") == std::string::npos) {
            int val = stoi(x);
            ESP_LOGI("dashboard", "Freezer 2 humidity is %d%%", val);
            id(latest_freezer2_humidity) = val;
            id(last_update_freezer) = id(esptime).now();
          } else {
            ESP_LOGW("dashboard", "Error processing freezer 2 humidity: %s", x.c_str());
          }
    - topic: incubator/sensor/wifi_signal_strength/state
      then:
        lambda: |-
          if (x.find_first_not_of("-+.0123456789") == std::string::npos) {
            int val = stoi(x);
            ESP_LOGI("dashboard", "Freezer WiFi signal strength is %ddBm", val);
            id(latest_wifi_signal_strength_freezer) = val;
          } else {
            ESP_LOGW("dashboard", "Error processing signal strength: %s", x.c_str());
          }

spi:
  clk_pin: 18
  mosi_pin: 23
  miso_pin: 38

i2c:
   - id: bus_a
     sda: GPIO21
     scl: GPIO22
     scan: True

font:
  - file:
      type: gfonts
      family: Roboto
      weight: 900
    id: roboto
    size: 30
    glyphs: "ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz'"
  - file:
      type: gfonts
      family: Roboto
      weight: 900
    id: roboto_large
    size: 70
    glyphs: 0123456789+-.Â°%C
  - file:
      type: gfonts
      family: Roboto
      weight: 500
    id: roboto_small
    size: 16

color:
  - id: red
    red: 100%
    green: 0%
    blue: 0%
  - id: green
    red: 0%
    green: 75%
    blue: 0%
  - id: blue
    red: 0%
    green: 0%
    blue: 90%
  - id: amber
    red: 100%
    green: 40%
    blue: 5%
  - id: yellow
    red: 95%
    green: 80%
    blue: 0%
  - id: white
    red: 100%
    green: 100%
    blue: 100%
  - id: silver
    red: 70%
    green: 70%
    blue: 70%
  - id: black
    red: 0%
    green: 0%
    blue: 0%

image:
  - file: mdi:signal-cellular-2
    id: signal_good
    resize: 20x20
  - file: mdi:signal-cellular-1
    id: signal_low
    resize: 20x20
  - file: mdi:battery-low
    id: batt_low
    resize: 20x20
  - file: mdi:battery-medium
    id: batt_good
    resize: 20x20
  - file: mdi:leaf
    id: leaf
    resize: 90x90

interval:
  - interval: 5s
    then:
      - display.page.show_next: core2display
  - interval: 2min
    then:
      - if:
          condition:
            wifi.connected:
          then:
            - http_request.send:
                method: GET
                headers:
                  Content-Type: text/html
                url: !secret atmotube_api_url
                capture_response: true
                on_response:
                  then:
                    - lambda: |-
                        json::parse_json(body, [](JsonObject root) -> bool {
                            if (root["data"]["items"][0]) {
                                // get time
                                const std::string strtime = root["data"]["items"][0]["time"];
                                ESPTime t;
                                sscanf(
                                  strtime.c_str(),
                                  "%04hu-%02hhu-%02hhuT%02hhu:%02hhu:%02hhu",
                                  &t.year, &t.month, &t.day_of_month,
                                  &t.hour, &t.minute, &t.second);
                                t.day_of_week = 1; // isn't used, but needs to be valid
                                t.day_of_year = 1; // isn't used, but needs to be valid
                                t.recalc_timestamp_utc(false);
                                id(last_update_atmotube) = t;

                                // get VOC
                                const float voc = root["data"]["items"][0]["voc"];
                                if (voc < 0.5) {
                                    id(atmotube).publish_state(100 - 60 * voc);
                                } else if (voc < 2) {
                                    id(atmotube).publish_state((118 - 26 * voc) / 1.5f);
                                } else {
                                    const auto aqs = (374 - 44 * voc) / 6.5f;
                                    id(atmotube).publish_state(aqs < 0 ? 0 : aqs);
                                }

                                // get temp/humid
                                const int temp = root["data"]["items"][0]["t"];
                                const int humid = root["data"]["items"][0]["h"];
                                id(atmotube_temp).publish_state(temp);
                                id(atmotube_humid).publish_state(humid);

                                ESP_LOGI("dashboard", "Atmotube VOC=%0.3fppm, Temp=%0.0f'C, Humid=%0.0f%%", voc, temp, humid);
                                return true;
                            } else {
                                ESP_LOGE("dashboard", "Invalid response from Atmotube");
                                return false;
                            }
                        });

graph:
  - id: left_freezer_graph
    duration: 1h
    width: 320
    height: 50
    border: false
    traces:
      - sensor: freezer1_temperature
        color: silver
        line_type: SOLID
        continuous: true
        line_thickness: 2
  - id: right_freezer_graph
    duration: 1h
    width: 320
    height: 50
    border: false
    traces:
      - sensor: freezer2_temperature
        color: silver
        line_type: SOLID
        continuous: true
        line_thickness: 2

display:
  - platform: ili9xxx
    id: core2display
    model: M5Stack
    cs_pin: 5
    dc_pin: 15
    rotation: 0
    invert_colors: true
    pages:
      - id: page_oiltank
        lambda: |-
          // set background colour
          it.fill(id(black));

          // constants
          const int width {it.get_width()};
          const int height {it.get_height()};
          const int centre_x {width / 2};
          const int footer_y {height - 20};

          // if not had a recent update, display red screen
          const auto timeout = (1 * 60 * 60) + (5 * 60); // 1hr:5min
          const double time_since_last_update_secs = difftime(id(esptime).now().timestamp, id(last_update_oiltank).timestamp);
          const bool comms_lost = time_since_last_update_secs > timeout;
          if (time_since_last_update_secs < 0)
          {
            ESP_LOGW("dashboard", "Re-synching time");
            id(last_update_oiltank) = id(esptime).now();
          }
          if (comms_lost)
          {
            it.filled_rectangle(0, 26, width, height - 47, id(red));
            it.image(width, 1, id(batt_low), ImageAlign::TOP_RIGHT, id(red));
          }
          else
          {
            it.image(width, 1, id(batt_good), ImageAlign::TOP_RIGHT, id(green));
          }

          // current time
          it.strftime(centre_x, 0, id(roboto_small), TextAlign::TOP_CENTER, "%H:%M", id(esptime).now());

          // title
          it.line(0, 25, width, 25, id(white));
          it.print(centre_x, 50, id(roboto), id(green), TextAlign::CENTER, "Oil Tank");

          // fuel level indicator
          const int dial_y {((height - 75 - 20) / 2) + 65};
          it.printf(centre_x, dial_y, id(roboto_large), id(amber), TextAlign::CENTER, "%d%%", id(latest_fuel_level));

          // footer separator
          it.line(0, footer_y, width, footer_y, id(white));

          // signal strength
          it.printf(5, height, id(roboto_small), id(white), TextAlign::BOTTOM_LEFT, "%ddBm", id(latest_wifi_signal_strength_oiltank));
          if (comms_lost) {
            it.image(1, 1, id(signal_low), ImageAlign::TOP_LEFT, id(red));
          } else {
            if (id(latest_wifi_signal_strength_oiltank) > -90) {
              it.image(1, 1, id(signal_good), ImageAlign::TOP_LEFT, id(green));
            } else {
              it.image(1, 1, id(signal_low), ImageAlign::TOP_LEFT, id(amber));
            }
          }

          // litres remaining
          it.printf(width - 5, height, id(roboto_small), id(white), TextAlign::BOTTOM_RIGHT, "%d litres", id(latest_fuel_volume));

          // time since last update
          if (time_since_last_update_secs < 60) {
            it.printf(centre_x, height, id(roboto_small), id(white), TextAlign::BOTTOM_CENTER, "%.0f sec", time_since_last_update_secs);
          } else if (time_since_last_update_secs < 3600) {
            it.printf(centre_x, height, id(roboto_small), id(white), TextAlign::BOTTOM_CENTER, "%.0f min", time_since_last_update_secs / 60);
          } else {
            it.printf(centre_x, height, id(roboto_small), id(white), TextAlign::BOTTOM_CENTER, "%.1f hr", time_since_last_update_secs / 3600);
          }
      - id: page_freezer1
        lambda: |-
          // set background colour
          it.fill(id(black));

          // constants
          const int width {it.get_width()};
          const int height {it.get_height()};
          const int centre_x {width / 2};
          const int footer_y {height - 20};

          // if not received new data in 5mins, display red screen
          const double time_since_last_update_secs = difftime(id(esptime).now().timestamp, id(last_update_freezer).timestamp);
          const bool comms_lost = time_since_last_update_secs > 300;
          if (time_since_last_update_secs < 0)
          {
            ESP_LOGW("dashboard", "Re-synching time");
            id(last_update_freezer) = id(esptime).now();
          }
          if (comms_lost)
          {
            it.filled_rectangle(0, 26, width, height - 47, id(red));
            it.image(width, 1, id(batt_low), ImageAlign::TOP_RIGHT, id(red));
          }
          else
          {
            it.image(width, 1, id(batt_good), ImageAlign::TOP_RIGHT, id(green));
          }

          // current time
          it.strftime(centre_x, 0, id(roboto_small), TextAlign::TOP_CENTER, "%H:%M", id(esptime).now());

          // title
          it.line(0, 25, width, 25, id(white));
          it.print(centre_x, 50, id(roboto), id(green), TextAlign::CENTER, "Left Freezer");

          // temperature indicator
          const int dial_y {((height - 75 - 20) / 2) + 65};
          it.printf(centre_x, dial_y, id(roboto_large), id(amber), TextAlign::CENTER, "%0.1fÂ°C", id(latest_freezer1_temperature));

          // temperature graph
          it.graph(0, footer_y - 50, id(left_freezer_graph));

          // footer separator
          it.line(0, footer_y, width, footer_y, id(white));

          // signal strength
          it.printf(5, height, id(roboto_small), id(white), TextAlign::BOTTOM_LEFT, "%ddBm", id(latest_wifi_signal_strength_freezer));
          if (comms_lost) {
            it.image(1, 1, id(signal_low), ImageAlign::TOP_LEFT, id(red));
          } else {
            if (id(latest_wifi_signal_strength_freezer) > -90) {
              it.image(1, 1, id(signal_good), ImageAlign::TOP_LEFT, id(green));
            } else {
              it.image(1, 1, id(signal_low), ImageAlign::TOP_LEFT, id(amber));
            }
          }

          // time since last update
          if (time_since_last_update_secs < 60) {
            it.printf(centre_x, height, id(roboto_small), id(white), TextAlign::BOTTOM_CENTER, "%.0f sec", time_since_last_update_secs);
          } else if (time_since_last_update_secs < 3600) {
            it.printf(centre_x, height, id(roboto_small), id(white), TextAlign::BOTTOM_CENTER, "%.0f min", time_since_last_update_secs / 60);
          } else {
            it.printf(centre_x, height, id(roboto_small), id(white), TextAlign::BOTTOM_CENTER, "%.1f hr", time_since_last_update_secs / 3600);
          }

          // humidity
          it.printf(width - 5, height, id(roboto_small), id(white), TextAlign::BOTTOM_RIGHT, "%d%%RH", id(latest_freezer1_humidity));
      - id: page_freezer2
        lambda: |-
          // set background colour
          it.fill(id(black));

          // constants
          const int width {it.get_width()};
          const int height {it.get_height()};
          const int centre_x {width / 2};
          const int footer_y {height - 20};

          // if not received new data in 5mins, display red screen
          const double time_since_last_update_secs = difftime(id(esptime).now().timestamp, id(last_update_freezer).timestamp);
          const bool comms_lost = time_since_last_update_secs > 300;
          if (time_since_last_update_secs < 0)
          {
            ESP_LOGW("dashboard", "Re-synching time");
            id(last_update_freezer) = id(esptime).now();
          }
          if (comms_lost)
          {
            it.filled_rectangle(0, 26, width, height - 47, id(red));
            it.image(width, 1, id(batt_low), ImageAlign::TOP_RIGHT, id(red));
          }
          else
          {
            it.image(width, 1, id(batt_good), ImageAlign::TOP_RIGHT, id(green));
          }

          // current time
          it.strftime(centre_x, 0, id(roboto_small), TextAlign::TOP_CENTER, "%H:%M", id(esptime).now());

          // title
          it.line(0, 25, width, 25, id(white));
          it.print(centre_x, 50, id(roboto), id(green), TextAlign::CENTER, "Right Freezer");

          // temperature indicator
          const int dial_y {((height - 75 - 20) / 2) + 65};
          it.printf(centre_x, dial_y, id(roboto_large), id(amber), TextAlign::CENTER, "%0.1fÂ°C", id(latest_freezer2_temperature));

          // temperature graph
          it.graph(0, footer_y - 50, id(right_freezer_graph));

          // footer separator
          it.line(0, footer_y, width, footer_y, id(white));

          // signal strength
          it.printf(5, height, id(roboto_small), id(white), TextAlign::BOTTOM_LEFT, "%ddBm", id(latest_wifi_signal_strength_freezer));
          if (comms_lost) {
            it.image(1, 1, id(signal_low), ImageAlign::TOP_LEFT, id(red));
          } else {
            if (id(latest_wifi_signal_strength_freezer) > -90) {
              it.image(1, 1, id(signal_good), ImageAlign::TOP_LEFT, id(green));
            } else {
              it.image(1, 1, id(signal_low), ImageAlign::TOP_LEFT, id(amber));
            }
          }

          // time since last update
          if (time_since_last_update_secs < 60) {
            it.printf(centre_x, height, id(roboto_small), id(white), TextAlign::BOTTOM_CENTER, "%.0f sec", time_since_last_update_secs);
          } else if (time_since_last_update_secs < 3600) {
            it.printf(centre_x, height, id(roboto_small), id(white), TextAlign::BOTTOM_CENTER, "%.0f min", time_since_last_update_secs / 60);
          } else {
            it.printf(centre_x, height, id(roboto_small), id(white), TextAlign::BOTTOM_CENTER, "%.1f hr", time_since_last_update_secs / 3600);
          }

          // humidity
          it.printf(width - 5, height, id(roboto_small), id(white), TextAlign::BOTTOM_RIGHT, "%d%%RH", id(latest_freezer2_humidity));

      - id: page_atmotube
        lambda: |-
          // set background colour
          it.fill(id(black));

          // constants
          const int width {it.get_width()};
          const int height {it.get_height()};
          const int centre_x {width / 2};
          const int footer_y {height - 20};

          // check comms
          const double time_since_last_update_secs = difftime(id(esptime).now().timestamp, id(last_update_atmotube).timestamp);
          const auto t1 = id(esptime).now();
          const auto t2 = id(last_update_atmotube);
          const bool comms_lost = false;
          if (comms_lost)
          {
            it.filled_rectangle(0, 26, width, height - 47, id(red));
            it.image(width, 1, id(batt_low), ImageAlign::TOP_RIGHT, id(red));
          }
          else
          {
            it.image(width, 1, id(batt_good), ImageAlign::TOP_RIGHT, id(green));
          }

          // current time
          it.strftime(centre_x, 0, id(roboto_small), TextAlign::TOP_CENTER, "%H:%M", id(esptime).now());

          // title
          it.line(0, 25, width, 25, id(white));
          it.print(centre_x, 50, id(roboto), id(green), TextAlign::CENTER, "Air Quality");

          // AQS indicator
          const int dial_y {((height - 75 - 20) / 2) + 65};
          if (id(atmotube).state >= 81) {
            it.image(centre_x, dial_y, id(leaf), ImageAlign::CENTER, id(blue));
          } else if (id(atmotube).state >= 61) {
            it.image(centre_x, dial_y, id(leaf), ImageAlign::CENTER, id(green));
          } else if (id(atmotube).state >= 41) {
            it.image(centre_x, dial_y, id(leaf), ImageAlign::CENTER, id(yellow));
          } else if (id(atmotube).state >= 21) {
            it.image(centre_x, dial_y, id(leaf), ImageAlign::CENTER, id(amber));
          } else {
            it.image(centre_x, dial_y, id(leaf), ImageAlign::CENTER, id(red));
          }

          // footer separator
          it.line(0, footer_y, width, footer_y, id(white));

          // temperature
          it.printf(5, height, id(roboto_small), id(white), TextAlign::BOTTOM_LEFT, "%0.0fÂ°C", id(atmotube_temp).state);

          // time since last update
          if (time_since_last_update_secs < 60) {
            it.printf(centre_x, height, id(roboto_small), id(white), TextAlign::BOTTOM_CENTER, "%.0f sec", time_since_last_update_secs);
          } else if (time_since_last_update_secs < 3600) {
            it.printf(centre_x, height, id(roboto_small), id(white), TextAlign::BOTTOM_CENTER, "%.0f min", time_since_last_update_secs / 60);
          } else {
            it.printf(centre_x, height, id(roboto_small), id(white), TextAlign::BOTTOM_CENTER, "%.1f hr", time_since_last_update_secs / 3600);
          }

          // VOC
          it.printf(width - 5, height, id(roboto_small), id(white), TextAlign::BOTTOM_RIGHT, "AQS=%.0f%%", id(atmotube).state);

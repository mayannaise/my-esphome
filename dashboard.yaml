esphome:
  name: dashboard
  platform: ESP32
  board: m5stack-core-esp32

<<: !include common.yaml

wifi:
  ssid: !secret wifi_ssid_dashboard
  password: !secret wifi_password
  ap:
    password: !secret fallback_ap_password

external_components:
  - source: github://pionizer/pionizer-axp192
    components: [axp192]

globals:
  - id: latest_fuel_level
    type: int
    initial_value: "-1"
    restore_value: no
  - id: latest_fuel_volume
    type: int
    restore_value: no
  - id: latest_wifi_signal_strength
    type: int
    restore_value: no
  - id: last_update
    type: ESPTime
    initial_value: "id(esptime).now()"
    restore_value: no

time:
  platform: sntp
  id: esptime

sun:
  latitude: !secret home_lat
  longitude: !secret home_lon
  id: the_sun

sensor:
  - platform: axp192
    model: M5CORE2
    address: 0x34
    i2c_id: bus_a
    update_interval: 30s
    brightness: 100%
    battery_level:
      name: Battery Level
  - platform: wifi_signal
    name: WiFi Signal Strength
  - platform: uptime
    name: Uptime

mqtt:
  broker: !secret mqtt_broker_host
  on_message:
    - topic: oiltank/sensor/fuel_level/state
      then:
        lambda: |-
          if (x.find_first_not_of("-+.0123456789") == std::string::npos) {
            int val = stoi(x);
            ESP_LOGI("dashboard", "Fuel level is %d%%", val);
            id(latest_fuel_level) = val;
            id(last_update) = id(esptime).now();
          } else {
            ESP_LOGW("dashboard", "Error processing fuel level: %s", x.c_str());
          }
    - topic: oiltank/sensor/fuel_volume/state
      then:
        lambda: |-
          if (x.find_first_not_of("-+.0123456789") == std::string::npos) {
            int val = stoi(x);
            ESP_LOGI("dashboard", "Fuel volume is %d litres", val);
            id(latest_fuel_volume) = val;
            id(last_update) = id(esptime).now();
          } else {
            ESP_LOGW("dashboard", "Error processing fuel volume: %s", x.c_str());
          }
    - topic: oiltank/sensor/wifi_signal_strength/state
      then:
        lambda: |-
          if (x.find_first_not_of("-+.0123456789") == std::string::npos) {
            int val = stoi(x);
            ESP_LOGI("dashboard", "Oiltank WiFi signal strength is %ddBm", val);
            id(latest_wifi_signal_strength) = val;
            id(last_update) = id(esptime).now();
          } else {
            ESP_LOGW("dashboard", "Error processing signal strength: %s", x.c_str());
          }

spi:
  clk_pin: 18
  mosi_pin: 23
  miso_pin: 38

i2c:
   - id: bus_a
     sda: GPIO21
     scl: GPIO22
     scan: True

font:
  - file:
      type: gfonts
      family: Roboto
      weight: 900
    id: roboto
    size: 30
  - file:
      type: gfonts
      family: Roboto
      weight: 900
    id: roboto_large
    size: 60
  - file:
      type: gfonts
      family: Roboto
      weight: 500
    id: roboto_small
    size: 16

display:
  - platform: ili9xxx
    model: M5Stack
    cs_pin: 5
    dc_pin: 15
    rotation: 0
    lambda: |-
      const auto red = Color(255, 0, 0);
      const auto green = Color(0, 190, 0);
      const auto blue = Color(10, 0, 200);
      const auto amber = Color(255, 191, 10);
      const auto white = Color(240, 240, 240);
      const auto black = Color(0, 0, 0);

      // if not received new data in 5mins, display red screen
      const double time_since_last_update_secs = difftime(id(esptime).now().timestamp, id(last_update).timestamp);
      const auto data_timeout = time_since_last_update_secs > 300;
      if (data_timeout || (id(latest_fuel_level) < 0))
      {
        it.fill(red);
      }
      else
      {
        it.fill(black);
      }
      
      // title
      it.rectangle(20, 20, it.get_width() - 40, 50, red);
      it.print(it.get_width() / 2, 45, id(roboto), green, TextAlign::CENTER, "Oil Tank");

      // fuel level
      const auto dial_x {it.get_width() / 2};
      const auto dial_y {((it.get_height() - 110) / 2) + 90};
      const auto radius {((it.get_height() - 110) / 2)};
      it.filled_circle(dial_x, dial_y, radius, blue);
      char text[20];
      snprintf(text, 20, "%d%%", id(latest_fuel_level));
      if (id(latest_fuel_level) < 0) {
        // no data received yet
        it.print(dial_x, dial_y, id(roboto_large), amber, TextAlign::CENTER, "---");
      } else {
        it.print(dial_x, dial_y, id(roboto_large), amber, TextAlign::CENTER, text);
      }

      // signal strength
      snprintf(text, 20, "%ddBm", id(latest_wifi_signal_strength));
      it.print(5, it.get_height(), id(roboto_small), white, TextAlign::BOTTOM_LEFT, text);

      // litres remaining
      snprintf(text, 20, "%d litres", id(latest_fuel_volume));
      it.print(it.get_width() - 5, it.get_height(), id(roboto_small), white, TextAlign::BOTTOM_RIGHT, text);

      // current time
      it.strftime(dial_x, 0, id(roboto_small), TextAlign::TOP_CENTER, "%H:%M", id(esptime).now());
